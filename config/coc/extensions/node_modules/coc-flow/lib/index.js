!function(e,t){for(var n in t)e[n]=t[n]}(exports,function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=3)}([function(e,t){e.exports=require("coc.nvim")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("path")},function(e,t,n){"use strict";n.r(t),n.d(t,"activate",function(){return s});var r=n(0),o=n(1),u=n.n(o),i=n(2),a=n.n(i);function c(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var f=function(e){var t=a.a.join(r.workspace.rootPath,"node_modules",".bin","flow");return e.useNPMPackagedFlow&&u.a.existsSync(t)?t:e.pathToFlow},l=function(e){return[["lsp"],e.stopFlowOnExit?["--autostop"]:[],e.lazyMode.length>0?["--lazy-mode",e.lazyMode]:[]].reduce(function(e,t){return[].concat(c(e),c(t))},[])};function s(e){var t=a.a.join(r.workspace.rootPath,".flowconfig"),n=r.workspace.getConfiguration().get("flow",{});if(u.a.existsSync(t)&&!1!==n.enable){var o={command:f(n),args:l(n)},i={documentSelector:["javascript","javascriptreact"].reduce(function(e,t){return[].concat(c(e),[{language:t,scheme:"file"},{language:t,scheme:"untitled"}])},[])},s=new r.LanguageClient("flow","Flow",o,i);e.subscriptions.push(r.services.registLanguageClient(s))}}}]));